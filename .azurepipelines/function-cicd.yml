---
name: $(Build.DefinitionName)-$(date:yyyyMMdd)$(rev:.r)

trigger: none

# parameters are typed with defaults so they are correctly populated, you will get a choice in the GUI to edit these, but you should keep all changes as code.
parameters:

  - name: CODE_VERSION
    type: string
    default: ""
    displayName: "What is version of your language stack, e.g. for python - 3.9?"

  - name: CODE_ARCH
    type: string
    default: "x64"
    displayName: "What is your architecture? Defaults to x64"

  - name: CODE_PATH
    type: string
    default: ""
    displayName: "What version of terraform should be installed?"

  - name: FILE_TO_ARCHIVE
    type: string
    default: ""
    displayName: "Desired file to be archived"

  - name: ARCHIVE_PATH
    type: string
    default: ""
    displayName: "Desired archive file path"

  - name: ARCHIVE_FILE_NAME
    type: string
    default: ""
    displayName: "Desired archive file name"

  - name: ARCHIVE_FILE_NAME
    type: boolean
    default: false
    displayName: "Do you wish to tar the artifact before upload, defaults to false"

  - name: VARIABLE_GROUP_NAME
    type: string
    default: "svp-kv-ldo-euw-dev-mgt-01"
    displayName: "Enter the variable group which contains your authentication information"

  - name: AZDO_SERVICE_CONNECTION_NAME
    type: string
    default: ""
    displayName: "The name of the azdo service connection which has IAM to your function app"

  - name: FUNCTION_APP_NAME
    type: string
    default: ""
    displayName: "The name of the function app you wish to deploy too"

  - name: FUNCTION_APP_TYPE
    type: string
    default: ""
    displayName: "The type of function app"

  - name: FUNCTION_APP_PACKAGE_PATH
    type: string
    default: ""
    displayName: "The path to the app package"

  - name: FUNCTION_APP_RUNTIME_STACK
    type: string
    default: ""
    displayName: "The type of Azure function app you are deploying too"

  - name: FUNCTION_APP_STARTUP_COMMAND
    type: string
    default: ""
    displayName: "The function startup cmd"

# Declare variable group to pass variables to parameters, in this case, a libre-devops keyvault which is using a service principle for authentication
variables:
  - group: ${{ parameters.VARIABLE_GROUP_NAME }}

# Sets what repos need cloned, for example, a library repo for modules and a poly-repo for target code
resources:
  repositories:

  - repository: azdo-azure-function-package-and-deploy-pipeline-template
    type: github
    endpoint: github_service_connection
    name: libre-devops/azdo-azure-function-package-and-deploy-pipeline-template
    ref: main

# You may wish to use a separate or self-hosted agent per job, by default, all jobs will inherit stage agent
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

# Sets stage so that multiple stages can be used if needed, as it stands, only 1 stage is expected and is thus passed as a parameter
stages:
  - stage: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}"
    displayName: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }} Stage"
    jobs:
      - job: Terraform_Build
        workspace:
          clean: all
        displayName: Terraform Build
        steps:

          # Declare the repos needed from the resources list
          - checkout: self

          # Remotely fetch pipeline template, in this case, I am using one in my development repo.
          - template: /.azurepipelines/.templates/.python/function-app-package-and-deploy.yml@azdo-azure-function-package-and-deploy-pipeline-template
            parameters:
              CODE_VERSION: "3.9"
              CODE_ARCH: "x64"
              CODE_PATH: "$(Build.SourcesDirectory)/azure-office-ip/og-code"
              FILE_TO_ARCHIVE: ${{ parameters.CODE_PATH }}
              ARCHIVE_TYPE: "zip"
              ARCHIVE_PATH: $(Build.ArtifactStagingDirectory)
              ARCHIVE_FILE_NAME: $(Build.BuildId).${{ parameters.ARCHIVE_TYPE }}
              ARTIFACT_NAME: "lbdo-fnc-drop"
              STORE_ARTIFACT_AS_TAR: false
              AZDO_SERVICE_CONNECTION_NAME: "svp-ldo-euw-dev-mgt-01"
              FUNCTION_APP_TYPE: "functionAppLinux"
              FUNCTION_APP_NAME: "fnc-ldo-euw-dev-01"
              FUNCTION_APP_PACKAGE_PATH: "${{ parameters.ARCHIVE_PATH }}/${{ parameters.ARCHIVE_FILE_NAME }}"
              FUNCTION_APP_RUNTIME_STACK: "PYTHON|3.8"
              FUNCTION_APP_STARTUP_COMMAND: "__init__.py"
