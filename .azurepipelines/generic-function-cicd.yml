---
name: $(Build.DefinitionName)-$(date:yyyyMMdd)$(rev:.r)

trigger: none

# parameters are typed with defaults so they are correctly populated, you will get a choice in the GUI to edit these, but you should keep all changes as code.
parameters:

  - name: SHORTHAND_ENVIRONMENT_NAME
    default: dev
    displayName: "What is the shorthand name for this environment?"
    type: string
    values:
      - dev
      - poc
      - mvp
      - tst
      - uat
      - ppd
      - prd

  - name: SHORTHAND_PROJECT_NAME
    type: string
    default: "ldo"
    displayName: "Shorthand Project e.g. lbdo for libredevops"

  - name: CODE_PATH
    type: string
    default: "$(Build.SourcesDirectory)/og-code"
    displayName: "Where is your code being stored?"

  - name: AZDO_SERVICE_CONNECTION_NAME
    type: string
    default: "svp-ldo-euw-dev-mgt-01"
    displayName: "The name of the azdo service connection which has IAM to your function app"

  - name: FUNCTION_APP_NAME
    type: string
    default: "fnc-ldo-euw-dev-01"
    displayName: "The name of the function app you wish to deploy too"

  - name: FUNCTION_CORE_TOOLS_VERSION
    type: string
    default: "4"
    displayName: "The name of the function app you wish to deploy too"

# Sets what repos need cloned, for example, a library repo for modules and a poly-repo for target code
resources:
  repositories:

  - repository: azdo-azure-function-package-and-deploy-pipeline-template
    type: github
    endpoint: github_service_connection
    name: libre-devops/azdo-azure-function-package-and-deploy-pipeline-template
    ref: main

# You may wish to use a separate or self-hosted agent per job, by default, all jobs will inherit stage agent
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

# Sets stage so that multiple stages can be used if needed, as it stands, only 1 stage is expected and is thus passed as a parameter
stages:
  - stage: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}"
    displayName: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }} Stage"
    jobs:
      - job: Code_Build
        workspace:
          clean: all
        displayName: Code Build and Deploy
        steps:

          # Declare the repos needed from the resources list
          - checkout: self

          # Remotely fetch pipeline template, in this case, I am using one in my development repo.
          - template: /.azurepipelines/.templates/.python/generic-function-app-package-and-deploy.yml@azdo-azure-function-package-and-deploy-pipeline-template
            parameters:
              CODE_PATH: ${{ parameters.CODE_PATH }}
              AZDO_SERVICE_CONNECTION_NAME: ${{ parameters.AZDO_SERVICE_CONNECTION_NAME }}
              FUNCTION_APP_NAME: ${{ parameters.FUNCTION_APP_NAME }}
              FUNCTION_CORE_TOOLS_VERSION: ${{ parameters.FUNCTION_CORE_TOOLS_VERSION }}

